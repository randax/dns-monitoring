# Multi-architecture Dockerfile
# Supports: linux/amd64, linux/arm64, linux/arm/v7

# Build stage
FROM --platform=$BUILDPLATFORM golang:1.21-alpine AS builder

# Build arguments
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG TARGETOS
ARG TARGETARCH
ARG VERSION=dev
ARG BUILD_TIME
ARG GIT_COMMIT

# Install build dependencies
RUN apk add --no-cache git make gcc musl-dev libpcap-dev

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the binary for target platform
RUN echo "Building for ${TARGETOS}/${TARGETARCH} on ${BUILDPLATFORM}" && \
    CGO_ENABLED=1 \
    GOOS=${TARGETOS} \
    GOARCH=${TARGETARCH} \
    go build \
    -ldflags="-s -w \
    -X 'main.Version=${VERSION}' \
    -X 'main.BuildTime=${BUILD_TIME}' \
    -X 'main.GitCommit=${GIT_COMMIT}' \
    -X 'main.Platform=${TARGETOS}/${TARGETARCH}'" \
    -o dns-monitor \
    ./cmd/dns-monitoring

# Runtime stage
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    libpcap \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1000 -S dnsmonitor && \
    adduser -u 1000 -S dnsmonitor -G dnsmonitor

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /app/dns-monitor /app/dns-monitor

# Copy configuration files
COPY --from=builder /app/config*.yaml /app/

# Copy examples and docs
COPY --from=builder /app/examples /app/examples
COPY --from=builder /app/docs /app/docs

# Create necessary directories
RUN mkdir -p /app/logs /app/data && \
    chown -R dnsmonitor:dnsmonitor /app

# Switch to non-root user
USER dnsmonitor

# Expose Prometheus metrics port
EXPOSE 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/app/dns-monitor", "version"]

# Default command
ENTRYPOINT ["/app/dns-monitor"]
CMD ["monitor", "-c", "/app/config.yaml"]